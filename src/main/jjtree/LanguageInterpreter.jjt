options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
   STATIC=false;
}

PARSER_BEGIN(ExpressionParser)

package edu.wallawalla.cs.cptr354.visitor;

public class ExpressionParser {

  public static void main(String args[]) throws Exception {
    ExpressionParser parser = new ExpressionParser(System.in);
    ASTstart expr=parser.start();
    ExpressionVisitor v=new ExpressionVisitor();
    expr.jjtAccept(v,null);
  }
}

PARSER_END(ExpressionParser)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
}

TOKEN:
{

        <DOUBLE: ((["0"-"9"])+)"."(["0"-"9"])+>
    |   <ASSIGN: "var" >
	|	<DEBUG: "debugger">
	|	<VARIABLE: (["a"-"z"])+>	
	|	<PLUS: "+">
	|	<MINUS: "-">
    |   <TIMES: "*">
    |   <DIVIDE: "/">

}

ASTstart start() #start:{}
{
  (statement())+
  { return jjtThis; }
}

void statement():
{}
{
	(
		VariableStatement()
		| debug()
		| print()
	)";"
}

void VariableStatement():
{}
{
	<ASSIGN> identifier() (intitaliser())*
}


void intitaliser() #Statement:
{}
{
  "="expression()
}

void debug():
{}
{
	<DEBUG>#DebugExpr
}

void print():
{}
{
	"console.log("expression()")"#PrintExpr(1)
}

void identifier() :
{}
{
	<VARIABLE>
	{
		jjtThis.data.put("name",token.image);
	}#Variable
}

void expression():
{}
{
	additiveExpression()
}

void additiveExpression() :
{}
{
	multiplicativeExpression()
	(
        <PLUS> multiplicativeExpression()#AddExpr(2)
        | <MINUS> multiplicativeExpression()#Subtraction(2)
    )*
}

void multiplicativeExpression() :
{}
{
	unaryExpression()
	(
        <TIMES> unaryExpression()#TimesExpr(2)
        | <DIVIDE> unaryExpression()#DivideExpr(2)
    )*
}

void unaryExpression() :
{}
{
	<MINUS> sqrtExpression()#NegateExpr(1)
    | sqrtExpression()
}

void sqrtExpression() :
{}
{
	"sqrt("paraExpression()")"#sqrtExpr(1)
    | paraExpression()
}

void paraExpression() :
{}
{
	"("expression()")"
    | numberExpression()
}

void numberExpression() :
{}
{
    <DOUBLE>
	{ 
		jjtThis.data.put("value",new Double(Double.parseDouble(token.image)));
	}#Number
	| <VARIABLE>
	{
		jjtThis.data.put("name",token.image);
	}#VariableValue
}