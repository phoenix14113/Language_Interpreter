options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
   STATIC=false;
}

PARSER_BEGIN(ExpressionParser)

package edu.wallawalla.cs.cptr354.visitor;

public class ExpressionParser {

  public static void main(String args[]) throws Exception {
    ExpressionParser parser = new ExpressionParser(System.in);
    ASTstart expr=parser.start();
    ExpressionVisitor v=new ExpressionVisitor();
    expr.jjtAccept(v,null);
  }
}

PARSER_END(ExpressionParser)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
}

TOKEN:
{
		<NUMBER: (["0"-"9"])+ >
	|	<VARIABLE: (["a"-"z"])+>	
	|	<PLUS: "+">
	|	<MINUS: "-">
	|	<DEBUG: "DEBUG">
	|	<PRINT: "PRINT">
}

ASTstart start() #start:{}
{
  (statement())+
  { return jjtThis; }
}

void statement():
{}
{
	(
		assignmentStatement()
		| debug()
		| print()
	)";"
}

void assignmentStatement() #Statement:
{}
{
  identifier()"="expression()
}

void debug():
{}
{
	<DEBUG>#DebugExpr
}

void print():
{}
{
	<PRINT> expression()#PrintExpr(1)
}

void identifier() :
{}
{
	<VARIABLE>
	{
		jjtThis.data.put("name",token.image);
	}#Variable
}

void expression():
{}
{
	additiveExpression()
}

void additiveExpression() :
{}
{
	unaryExpression()
	(<PLUS> unaryExpression()#AddExpr(2))*
}

void unaryExpression() :
{}
{
	<MINUS> numberExpression()#NegateExpr(1)|
	numberExpression()
}

void numberExpression() :
{}
{
	<NUMBER>
	{ 
		jjtThis.data.put("value",new Integer(Integer.parseInt(token.image)));
	}#Number
	| <VARIABLE>
	{
		jjtThis.data.put("name",token.image);
	}#VariableValue
}